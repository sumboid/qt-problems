!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR            = ar cqs$/;"	m
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
Controller	Controller.cpp	/^Controller::Controller(View* view): model(new Model(view))$/;"	f	class:Controller	signature:(View* view)
Controller	Controller.h	/^    Controller(View* view);$/;"	p	class:Controller	access:public	signature:(View* view)
Controller	Controller.h	/^class Controller : public QObject$/;"	c	inherits:QObject
Controller::Controller	Controller.cpp	/^Controller::Controller(View* view): model(new Model(view))$/;"	f	class:Controller	signature:(View* view)
Controller::Controller	Controller.h	/^    Controller(View* view);$/;"	p	class:Controller	access:public	signature:(View* view)
Controller::getStaticMetaObject	moc_Controller.cpp	/^const QMetaObject &Controller::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Controller	signature:()
Controller::metaObject	moc_Controller.cpp	/^const QMetaObject *Controller::metaObject() const$/;"	f	class:Controller	signature:() const
Controller::model	Controller.h	/^    Model* model;$/;"	m	class:Controller	access:private
Controller::qt_metacall	moc_Controller.cpp	/^int Controller::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QMetaObject::Call _c, int _id, void **_a)
Controller::qt_metacast	moc_Controller.cpp	/^void *Controller::qt_metacast(const char *_clname)$/;"	f	class:Controller	signature:(const char *_clname)
Controller::qt_static_metacall	moc_Controller.cpp	/^void Controller::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
Controller::resize	Controller.cpp	/^void Controller::resize()$/;"	f	class:Controller	signature:()
Controller::resize	Controller.h	/^    void resize();$/;"	p	class:Controller	access:public	signature:()
Controller::staticMetaObject	moc_Controller.cpp	/^const QMetaObject Controller::staticMetaObject = {$/;"	m	class:Controller	file:
Controller::staticMetaObjectExtraData	moc_Controller.cpp	/^const QMetaObjectExtraData Controller::staticMetaObjectExtraData = {$/;"	m	class:Controller	file:
Controller::update	Controller.cpp	/^void Controller::update()$/;"	f	class:Controller	signature:()
Controller::update	Controller.h	/^    void update();$/;"	p	class:Controller	access:public	signature:()
Controller::~Controller	Controller.cpp	/^Controller::~Controller()$/;"	f	class:Controller	signature:()
Controller::~Controller	Controller.h	/^    ~Controller();$/;"	p	class:Controller	access:public	signature:()
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
Drawable	Drawable.h	/^class Drawable$/;"	c
Drawable::draw	Drawable.h	/^    virtual void draw(const View* view, const Camera* camera, unsigned int color) = 0;$/;"	p	class:Drawable	access:private	signature:(const View* view, const Camera* camera, unsigned int color)
INCPATH	Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4 -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib64\/qt4 -lQtGui -L\/usr\/lib64 -L\/usr\/lib64\/qt4 -L\/usr\/X11R6\/lib -lQtCore -lgthread-2.0 -lrt -lglib-2.0 -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
Line	Line.h	/^    Line (const Vector& v1, const Vector& v2);$/;"	p	class:Line	access:public	signature:(const Vector& v1, const Vector& v2)
Line	Line.h	/^class Line : public Drawable$/;"	c	inherits:Drawable
Line::Line	Line.h	/^    Line (const Vector& v1, const Vector& v2);$/;"	p	class:Line	access:public	signature:(const Vector& v1, const Vector& v2)
Line::draw	Line.h	/^    virtual void draw(const View* view, const Camera* camera, unsigned int color);$/;"	p	class:Line	access:public	signature:(const View* view, const Camera* camera, unsigned int color)
Line::drawLine	Line.h	/^    void drawLine(const int x0, const int y0, const int x1, const int y1, unsigned int color, bool flip);$/;"	p	class:Line	access:private	signature:(const int x0, const int y0, const int x1, const int y1, unsigned int color, bool flip)
Line::v	Line.h	/^    Vector v[2];$/;"	m	class:Line	access:private
Line::~Line	Line.h	/^    virtual ~Line ();$/;"	p	class:Line	access:public	signature:()
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MainWindow	ui_MainWindow.h	/^    class MainWindow: public Ui_MainWindow {};$/;"	c	namespace:Ui	inherits:Ui_MainWindow
Model	Model.cpp	/^Model::Model(View* _view):$/;"	f	class:Model	signature:(View* _view)
Model	Model.h	/^    Model(View* view);$/;"	p	class:Model	access:public	signature:(View* view)
Model	Model.h	/^class Model$/;"	c
Model::Model	Model.cpp	/^Model::Model(View* _view):$/;"	f	class:Model	signature:(View* _view)
Model::Model	Model.h	/^    Model(View* view);$/;"	p	class:Model	access:public	signature:(View* view)
Model::draw	Model.cpp	/^void Model::draw()$/;"	f	class:Model	signature:()
Model::draw	Model.h	/^    void draw();$/;"	p	class:Model	access:public	signature:()
Model::resize	Model.cpp	/^void Model::resize()$/;"	f	class:Model	signature:()
Model::resize	Model.h	/^    void resize();$/;"	p	class:Model	access:public	signature:()
Model::view	Model.h	/^    View* view;$/;"	m	class:Model	access:private
Model::~Model	Model.cpp	/^Model::~Model()$/;"	f	class:Model	signature:()
Model::~Model	Model.h	/^    ~Model();$/;"	p	class:Model	access:public	signature:()
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
PainterWidget	PainterWidget.cpp	/^PainterWidget::PainterWidget(Controller* _controller):$/;"	f	class:PainterWidget	signature:(Controller* _controller)
PainterWidget	PainterWidget.h	/^    PainterWidget(Controller* controller);$/;"	p	class:PainterWidget	access:public	signature:(Controller* controller)
PainterWidget	PainterWidget.h	/^class PainterWidget : public QWidget$/;"	c	inherits:QWidget
PainterWidget::PainterWidget	PainterWidget.cpp	/^PainterWidget::PainterWidget(Controller* _controller):$/;"	f	class:PainterWidget	signature:(Controller* _controller)
PainterWidget::PainterWidget	PainterWidget.h	/^    PainterWidget(Controller* controller);$/;"	p	class:PainterWidget	access:public	signature:(Controller* controller)
PainterWidget::clear	PainterWidget.cpp	/^void PainterWidget::clear()$/;"	f	class:PainterWidget	signature:()
PainterWidget::clear	PainterWidget.h	/^    void clear();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::controller	PainterWidget.h	/^    Controller* controller;$/;"	m	class:PainterWidget	access:private
PainterWidget::getColor	PainterWidget.cpp	/^unsigned int PainterWidget::getColor(int x, int y)$/;"	f	class:PainterWidget	signature:(int x, int y)
PainterWidget::getColor	PainterWidget.h	/^    unsigned int getColor(int x, int y);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y)
PainterWidget::getHeight	PainterWidget.cpp	/^int PainterWidget::getHeight()$/;"	f	class:PainterWidget	signature:()
PainterWidget::getHeight	PainterWidget.h	/^    int getHeight();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::getStaticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject &PainterWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PainterWidget	signature:()
PainterWidget::getWidth	PainterWidget.cpp	/^int PainterWidget::getWidth()$/;"	f	class:PainterWidget	signature:()
PainterWidget::getWidth	PainterWidget.h	/^    int getWidth();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::image	PainterWidget.h	/^    QImage image;$/;"	m	class:PainterWidget	access:private
PainterWidget::metaObject	moc_PainterWidget.cpp	/^const QMetaObject *PainterWidget::metaObject() const$/;"	f	class:PainterWidget	signature:() const
PainterWidget::paint	PainterWidget.cpp	/^void PainterWidget::paint()$/;"	f	class:PainterWidget	signature:()
PainterWidget::paint	PainterWidget.h	/^    void paint();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::paintEvent	PainterWidget.cpp	/^void PainterWidget::paintEvent(QPaintEvent*)$/;"	f	class:PainterWidget	signature:(QPaintEvent*)
PainterWidget::paintEvent	PainterWidget.h	/^    virtual void paintEvent(QPaintEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QPaintEvent*)
PainterWidget::qt_metacall	moc_PainterWidget.cpp	/^int PainterWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
PainterWidget::qt_metacast	moc_PainterWidget.cpp	/^void *PainterWidget::qt_metacast(const char *_clname)$/;"	f	class:PainterWidget	signature:(const char *_clname)
PainterWidget::qt_static_metacall	moc_PainterWidget.cpp	/^void PainterWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
PainterWidget::resizeEvent	PainterWidget.cpp	/^void PainterWidget::resizeEvent(QResizeEvent*)$/;"	f	class:PainterWidget	signature:(QResizeEvent*)
PainterWidget::resizeEvent	PainterWidget.h	/^    virtual void resizeEvent(QResizeEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QResizeEvent*)
PainterWidget::setPixel	PainterWidget.cpp	/^void PainterWidget::setPixel(int x, int y, QRgb color)$/;"	f	class:PainterWidget	signature:(int x, int y, QRgb color)
PainterWidget::setPixel	PainterWidget.h	/^    void setPixel(int x, int y, unsigned int color);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y, unsigned int color)
PainterWidget::staticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject PainterWidget::staticMetaObject = {$/;"	m	class:PainterWidget	file:
PainterWidget::staticMetaObjectExtraData	moc_PainterWidget.cpp	/^const QMetaObjectExtraData PainterWidget::staticMetaObjectExtraData = {$/;"	m	class:PainterWidget	file:
PainterWidget::~PainterWidget	PainterWidget.cpp	/^PainterWidget::~PainterWidget()$/;"	f	class:PainterWidget	signature:()
PainterWidget::~PainterWidget	PainterWidget.h	/^    ~PainterWidget();$/;"	p	class:PainterWidget	access:public	signature:()
Point	Point.h	/^typedef std::pair<int, int> Point;$/;"	t
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = FIT9201SUMBATYANTS_Knot$/;"	m
RANLIB	Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = main.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = FIT9201SUMBATYANTS_Knot$/;"	m
UI_MAINWINDOW_H	ui_MainWindow.h	11;"	d
Ui	ViewKnot.h	/^namespace Ui$/;"	n
Ui	ui_MainWindow.h	/^namespace Ui {$/;"	n
Ui::MainWindow	ui_MainWindow.h	/^    class MainWindow: public Ui_MainWindow {};$/;"	c	namespace:Ui	inherits:Ui_MainWindow
Ui_MainWindow	ui_MainWindow.h	/^class Ui_MainWindow$/;"	c
Ui_MainWindow::centralwidget	ui_MainWindow.h	/^    QWidget *centralwidget;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::controlWidget	ui_MainWindow.h	/^    QWidget *controlWidget;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::customButton	ui_MainWindow.h	/^    QRadioButton *customButton;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::defaultButton	ui_MainWindow.h	/^    QRadioButton *defaultButton;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::horizontalLayout	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::retranslateUi	ui_MainWindow.h	/^    void retranslateUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
Ui_MainWindow::setupUi	ui_MainWindow.h	/^    void setupUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
Ui_MainWindow::verticalLayout	ui_MainWindow.h	/^    QVBoxLayout *verticalLayout;$/;"	m	class:Ui_MainWindow	access:public
VIEW_H	View.h	2;"	d
Vector	Vector.cpp	/^Vector::Vector(const double x0,$/;"	f	class:Vector	signature:(const double x0, const double x1, const double x2, const double x3 = 1)
Vector	Vector.h	/^    Vector (const double x0,$/;"	p	class:Vector	access:public	signature:(const double x0, const double x1, const double x2, const double x3)
Vector	Vector.h	/^class Vector {$/;"	c
Vector2D	Vector.h	/^struct Vector2D$/;"	s
Vector2D::x	Vector.h	/^    int x[2];$/;"	m	struct:Vector2D	access:public
Vector::Vector	Vector.cpp	/^Vector::Vector(const double x0,$/;"	f	class:Vector	signature:(const double x0, const double x1, const double x2, const double x3 = 1)
Vector::Vector	Vector.h	/^    Vector (const double x0,$/;"	p	class:Vector	access:public	signature:(const double x0, const double x1, const double x2, const double x3)
Vector::add	Vector.cpp	/^void Vector::add(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
Vector::add	Vector.h	/^    void add(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
Vector::getCoordinates	Vector.cpp	/^const double* Vector::getCoordinates() const$/;"	f	class:Vector	signature:() const
Vector::getCoordinates	Vector.h	/^    const double* getCoordinates() const;$/;"	p	class:Vector	access:private	signature:() const
Vector::magnitude	Vector.cpp	/^double Vector::magnitude()$/;"	f	class:Vector	signature:()
Vector::magnitude	Vector.h	/^    double magnitude();$/;"	p	class:Vector	access:public	signature:()
Vector::multiply	Vector.cpp	/^void Vector::multiply(const double& coef)$/;"	f	class:Vector	signature:(const double& coef)
Vector::multiply	Vector.h	/^    void multiply(const double&);$/;"	p	class:Vector	access:public	signature:(const double&)
Vector::multm	Vector.cpp	/^void Vector::multm(double matrix[4][4])$/;"	f	class:Vector	signature:(double matrix[4][4])
Vector::multm	Vector.h	/^    void multm(double matrix[4][4]);$/;"	p	class:Vector	access:private	signature:(double matrix[4][4])
Vector::normalize	Vector.cpp	/^void Vector::normalize()$/;"	f	class:Vector	signature:()
Vector::normalize	Vector.h	/^    void normalize();$/;"	p	class:Vector	access:public	signature:()
Vector::project	Vector.cpp	/^Vector2D Vector::project(const double& coef) const$/;"	f	class:Vector	signature:(const double& coef) const
Vector::project	Vector.h	/^    Vector2D project(const double&) const;$/;"	p	class:Vector	access:public	signature:(const double&) const
Vector::rotate	Vector.cpp	/^void Vector::rotate(const double* angle)$/;"	f	class:Vector	signature:(const double* angle)
Vector::rotate	Vector.h	/^    void rotate(const double*);$/;"	p	class:Vector	access:public	signature:(const double*)
Vector::rotateHelper	Vector.cpp	/^void Vector::rotateHelper(const int number, const double angle)$/;"	f	class:Vector	signature:(const int number, const double angle)
Vector::rotateHelper	Vector.h	/^    void rotateHelper(const int number, const double angle);$/;"	p	class:Vector	access:private	signature:(const int number, const double angle)
Vector::scale	Vector.cpp	/^void Vector::scale(const double* coef)$/;"	f	class:Vector	signature:(const double* coef)
Vector::scale	Vector.h	/^    void scale(const double*);$/;"	p	class:Vector	access:public	signature:(const double*)
Vector::subtract	Vector.cpp	/^void Vector::subtract(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
Vector::subtract	Vector.h	/^    void subtract(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
Vector::translate	Vector.cpp	/^void Vector::translate(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
Vector::translate	Vector.h	/^    void translate(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
Vector::x	Vector.h	/^    double x[4];$/;"	m	class:Vector	access:private
Vector::~Vector	Vector.cpp	/^Vector::~Vector() {}$/;"	f	class:Vector	signature:()
Vector::~Vector	Vector.h	/^    virtual ~Vector ();$/;"	p	class:Vector	access:public	signature:()
View	View.h	/^class View$/;"	c
View::clear	View.h	/^    virtual void clear() = 0;$/;"	p	class:View	access:public	signature:()
View::getColor	View.h	/^    virtual unsigned int getColor(int x, int y) = 0;$/;"	p	class:View	access:public	signature:(int x, int y)
View::getHeight	View.h	/^    virtual int getHeight() = 0;$/;"	p	class:View	access:public	signature:()
View::getWidth	View.h	/^    virtual int getWidth() = 0;$/;"	p	class:View	access:public	signature:()
View::paint	View.h	/^    virtual void paint() = 0;$/;"	p	class:View	access:public	signature:()
View::setPixel	View.h	/^    virtual void setPixel(int x, int y, unsigned int color) = 0;$/;"	p	class:View	access:public	signature:(int x, int y, unsigned int color)
View::~View	View.h	/^    virtual ~View() {}$/;"	f	class:View	access:public	signature:()
ViewKnot	ViewKnot.cpp	/^ViewKnot::ViewKnot()$/;"	f	class:ViewKnot	signature:()
ViewKnot	ViewKnot.h	/^    ViewKnot();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot	ViewKnot.h	/^class ViewKnot: public View, public QObject$/;"	c	inherits:View,QObject
ViewKnot::ViewKnot	ViewKnot.cpp	/^ViewKnot::ViewKnot()$/;"	f	class:ViewKnot	signature:()
ViewKnot::ViewKnot	ViewKnot.h	/^    ViewKnot();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot::clear	ViewKnot.cpp	/^void ViewKnot::clear()$/;"	f	class:ViewKnot	signature:()
ViewKnot::clear	ViewKnot.h	/^    virtual void clear();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot::controller	ViewKnot.h	/^    Controller* controller;$/;"	m	class:ViewKnot	access:private
ViewKnot::getColor	ViewKnot.cpp	/^unsigned int ViewKnot::getColor(int x, int y)$/;"	f	class:ViewKnot	signature:(int x, int y)
ViewKnot::getColor	ViewKnot.h	/^    virtual unsigned int getColor(int x, int y);$/;"	p	class:ViewKnot	access:public	signature:(int x, int y)
ViewKnot::getHeight	ViewKnot.cpp	/^int ViewKnot::getHeight()$/;"	f	class:ViewKnot	signature:()
ViewKnot::getHeight	ViewKnot.h	/^    virtual int getHeight();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot::getWidth	ViewKnot.cpp	/^int ViewKnot::getWidth()$/;"	f	class:ViewKnot	signature:()
ViewKnot::getWidth	ViewKnot.h	/^    virtual int getWidth();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot::mainWindow	ViewKnot.h	/^    QMainWindow mainWindow;$/;"	m	class:ViewKnot	access:private
ViewKnot::paint	ViewKnot.cpp	/^void ViewKnot::paint()$/;"	f	class:ViewKnot	signature:()
ViewKnot::paint	ViewKnot.h	/^    virtual void paint();$/;"	p	class:ViewKnot	access:public	signature:()
ViewKnot::painterWidget	ViewKnot.h	/^    PainterWidget* painterWidget;$/;"	m	class:ViewKnot	access:private
ViewKnot::setPixel	ViewKnot.cpp	/^void ViewKnot::setPixel(int x, int y, unsigned int color)$/;"	f	class:ViewKnot	signature:(int x, int y, unsigned int color)
ViewKnot::setPixel	ViewKnot.h	/^    virtual void setPixel(int x, int y, unsigned int color);$/;"	p	class:ViewKnot	access:public	signature:(int x, int y, unsigned int color)
ViewKnot::ui	ViewKnot.h	/^    Ui::MainWindow ui;$/;"	m	class:ViewKnot	access:private
ViewKnot::~ViewKnot	ViewKnot.cpp	/^ViewKnot::~ViewKnot()$/;"	f	class:ViewKnot	signature:()
ViewKnot::~ViewKnot	ViewKnot.h	/^    virtual ~ViewKnot();$/;"	p	class:ViewKnot	access:public	signature:()
add	Vector.cpp	/^void Vector::add(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
add	Vector.h	/^    void add(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
centralwidget	ui_MainWindow.h	/^    QWidget *centralwidget;$/;"	m	class:Ui_MainWindow	access:public
clear	PainterWidget.cpp	/^void PainterWidget::clear()$/;"	f	class:PainterWidget	signature:()
clear	PainterWidget.h	/^    void clear();$/;"	p	class:PainterWidget	access:public	signature:()
clear	View.h	/^    virtual void clear() = 0;$/;"	p	class:View	access:public	signature:()
clear	ViewKnot.cpp	/^void ViewKnot::clear()$/;"	f	class:ViewKnot	signature:()
clear	ViewKnot.h	/^    virtual void clear();$/;"	p	class:ViewKnot	access:public	signature:()
controlWidget	ui_MainWindow.h	/^    QWidget *controlWidget;$/;"	m	class:Ui_MainWindow	access:public
controller	PainterWidget.h	/^    Controller* controller;$/;"	m	class:PainterWidget	access:private
controller	ViewKnot.h	/^    Controller* controller;$/;"	m	class:ViewKnot	access:private
customButton	ui_MainWindow.h	/^    QRadioButton *customButton;$/;"	m	class:Ui_MainWindow	access:public
defaultButton	ui_MainWindow.h	/^    QRadioButton *defaultButton;$/;"	m	class:Ui_MainWindow	access:public
draw	Drawable.h	/^    virtual void draw(const View* view, const Camera* camera, unsigned int color) = 0;$/;"	p	class:Drawable	access:private	signature:(const View* view, const Camera* camera, unsigned int color)
draw	Line.h	/^    virtual void draw(const View* view, const Camera* camera, unsigned int color);$/;"	p	class:Line	access:public	signature:(const View* view, const Camera* camera, unsigned int color)
draw	Model.cpp	/^void Model::draw()$/;"	f	class:Model	signature:()
draw	Model.h	/^    void draw();$/;"	p	class:Model	access:public	signature:()
drawLine	Line.h	/^    void drawLine(const int x0, const int y0, const int x1, const int y1, unsigned int color, bool flip);$/;"	p	class:Line	access:private	signature:(const int x0, const int y0, const int x1, const int y1, unsigned int color, bool flip)
getColor	PainterWidget.cpp	/^unsigned int PainterWidget::getColor(int x, int y)$/;"	f	class:PainterWidget	signature:(int x, int y)
getColor	PainterWidget.h	/^    unsigned int getColor(int x, int y);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y)
getColor	View.h	/^    virtual unsigned int getColor(int x, int y) = 0;$/;"	p	class:View	access:public	signature:(int x, int y)
getColor	ViewKnot.cpp	/^unsigned int ViewKnot::getColor(int x, int y)$/;"	f	class:ViewKnot	signature:(int x, int y)
getColor	ViewKnot.h	/^    virtual unsigned int getColor(int x, int y);$/;"	p	class:ViewKnot	access:public	signature:(int x, int y)
getCoordinates	Vector.cpp	/^const double* Vector::getCoordinates() const$/;"	f	class:Vector	signature:() const
getCoordinates	Vector.h	/^    const double* getCoordinates() const;$/;"	p	class:Vector	access:private	signature:() const
getHeight	PainterWidget.cpp	/^int PainterWidget::getHeight()$/;"	f	class:PainterWidget	signature:()
getHeight	PainterWidget.h	/^    int getHeight();$/;"	p	class:PainterWidget	access:public	signature:()
getHeight	View.h	/^    virtual int getHeight() = 0;$/;"	p	class:View	access:public	signature:()
getHeight	ViewKnot.cpp	/^int ViewKnot::getHeight()$/;"	f	class:ViewKnot	signature:()
getHeight	ViewKnot.h	/^    virtual int getHeight();$/;"	p	class:ViewKnot	access:public	signature:()
getStaticMetaObject	moc_Controller.cpp	/^const QMetaObject &Controller::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Controller	signature:()
getStaticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject &PainterWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PainterWidget	signature:()
getWidth	PainterWidget.cpp	/^int PainterWidget::getWidth()$/;"	f	class:PainterWidget	signature:()
getWidth	PainterWidget.h	/^    int getWidth();$/;"	p	class:PainterWidget	access:public	signature:()
getWidth	View.h	/^    virtual int getWidth() = 0;$/;"	p	class:View	access:public	signature:()
getWidth	ViewKnot.cpp	/^int ViewKnot::getWidth()$/;"	f	class:ViewKnot	signature:()
getWidth	ViewKnot.h	/^    virtual int getWidth();$/;"	p	class:ViewKnot	access:public	signature:()
horizontalLayout	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout;$/;"	m	class:Ui_MainWindow	access:public
image	PainterWidget.h	/^    QImage image;$/;"	m	class:PainterWidget	access:private
magnitude	Vector.cpp	/^double Vector::magnitude()$/;"	f	class:Vector	signature:()
magnitude	Vector.h	/^    double magnitude();$/;"	p	class:Vector	access:public	signature:()
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
mainWindow	ViewKnot.h	/^    QMainWindow mainWindow;$/;"	m	class:ViewKnot	access:private
metaObject	moc_Controller.cpp	/^const QMetaObject *Controller::metaObject() const$/;"	f	class:Controller	signature:() const
metaObject	moc_PainterWidget.cpp	/^const QMetaObject *PainterWidget::metaObject() const$/;"	f	class:PainterWidget	signature:() const
model	Controller.h	/^    Model* model;$/;"	m	class:Controller	access:private
multiply	Vector.cpp	/^void Vector::multiply(const double& coef)$/;"	f	class:Vector	signature:(const double& coef)
multiply	Vector.h	/^    void multiply(const double&);$/;"	p	class:Vector	access:public	signature:(const double&)
multm	Vector.cpp	/^void Vector::multm(double matrix[4][4])$/;"	f	class:Vector	signature:(double matrix[4][4])
multm	Vector.h	/^    void multm(double matrix[4][4]);$/;"	p	class:Vector	access:private	signature:(double matrix[4][4])
normalize	Vector.cpp	/^void Vector::normalize()$/;"	f	class:Vector	signature:()
normalize	Vector.h	/^    void normalize();$/;"	p	class:Vector	access:public	signature:()
paint	PainterWidget.cpp	/^void PainterWidget::paint()$/;"	f	class:PainterWidget	signature:()
paint	PainterWidget.h	/^    void paint();$/;"	p	class:PainterWidget	access:public	signature:()
paint	View.h	/^    virtual void paint() = 0;$/;"	p	class:View	access:public	signature:()
paint	ViewKnot.cpp	/^void ViewKnot::paint()$/;"	f	class:ViewKnot	signature:()
paint	ViewKnot.h	/^    virtual void paint();$/;"	p	class:ViewKnot	access:public	signature:()
paintEvent	PainterWidget.cpp	/^void PainterWidget::paintEvent(QPaintEvent*)$/;"	f	class:PainterWidget	signature:(QPaintEvent*)
paintEvent	PainterWidget.h	/^    virtual void paintEvent(QPaintEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QPaintEvent*)
painterWidget	ViewKnot.h	/^    PainterWidget* painterWidget;$/;"	m	class:ViewKnot	access:private
project	Vector.cpp	/^Vector2D Vector::project(const double& coef) const$/;"	f	class:Vector	signature:(const double& coef) const
project	Vector.h	/^    Vector2D project(const double&) const;$/;"	p	class:Vector	access:public	signature:(const double&) const
qt_meta_data_Controller	moc_Controller.cpp	/^static const uint qt_meta_data_Controller[] = {$/;"	v	file:
qt_meta_data_PainterWidget	moc_PainterWidget.cpp	/^static const uint qt_meta_data_PainterWidget[] = {$/;"	v	file:
qt_meta_stringdata_Controller	moc_Controller.cpp	/^static const char qt_meta_stringdata_Controller[] = {$/;"	v	file:
qt_meta_stringdata_PainterWidget	moc_PainterWidget.cpp	/^static const char qt_meta_stringdata_PainterWidget[] = {$/;"	v	file:
qt_metacall	moc_Controller.cpp	/^int Controller::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_PainterWidget.cpp	/^int PainterWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacast	moc_Controller.cpp	/^void *Controller::qt_metacast(const char *_clname)$/;"	f	class:Controller	signature:(const char *_clname)
qt_metacast	moc_PainterWidget.cpp	/^void *PainterWidget::qt_metacast(const char *_clname)$/;"	f	class:PainterWidget	signature:(const char *_clname)
qt_static_metacall	moc_Controller.cpp	/^void Controller::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
qt_static_metacall	moc_PainterWidget.cpp	/^void PainterWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
resize	Controller.cpp	/^void Controller::resize()$/;"	f	class:Controller	signature:()
resize	Controller.h	/^    void resize();$/;"	p	class:Controller	access:public	signature:()
resize	Model.cpp	/^void Model::resize()$/;"	f	class:Model	signature:()
resize	Model.h	/^    void resize();$/;"	p	class:Model	access:public	signature:()
resizeEvent	PainterWidget.cpp	/^void PainterWidget::resizeEvent(QResizeEvent*)$/;"	f	class:PainterWidget	signature:(QResizeEvent*)
resizeEvent	PainterWidget.h	/^    virtual void resizeEvent(QResizeEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QResizeEvent*)
retranslateUi	ui_MainWindow.h	/^    void retranslateUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
rotate	Vector.cpp	/^void Vector::rotate(const double* angle)$/;"	f	class:Vector	signature:(const double* angle)
rotate	Vector.h	/^    void rotate(const double*);$/;"	p	class:Vector	access:public	signature:(const double*)
rotateHelper	Vector.cpp	/^void Vector::rotateHelper(const int number, const double angle)$/;"	f	class:Vector	signature:(const int number, const double angle)
rotateHelper	Vector.h	/^    void rotateHelper(const int number, const double angle);$/;"	p	class:Vector	access:private	signature:(const int number, const double angle)
scale	Vector.cpp	/^void Vector::scale(const double* coef)$/;"	f	class:Vector	signature:(const double* coef)
scale	Vector.h	/^    void scale(const double*);$/;"	p	class:Vector	access:public	signature:(const double*)
setPixel	PainterWidget.cpp	/^void PainterWidget::setPixel(int x, int y, QRgb color)$/;"	f	class:PainterWidget	signature:(int x, int y, QRgb color)
setPixel	PainterWidget.h	/^    void setPixel(int x, int y, unsigned int color);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y, unsigned int color)
setPixel	View.h	/^    virtual void setPixel(int x, int y, unsigned int color) = 0;$/;"	p	class:View	access:public	signature:(int x, int y, unsigned int color)
setPixel	ViewKnot.cpp	/^void ViewKnot::setPixel(int x, int y, unsigned int color)$/;"	f	class:ViewKnot	signature:(int x, int y, unsigned int color)
setPixel	ViewKnot.h	/^    virtual void setPixel(int x, int y, unsigned int color);$/;"	p	class:ViewKnot	access:public	signature:(int x, int y, unsigned int color)
setupUi	ui_MainWindow.h	/^    void setupUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
staticMetaObject	moc_Controller.cpp	/^const QMetaObject Controller::staticMetaObject = {$/;"	m	class:Controller	file:
staticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject PainterWidget::staticMetaObject = {$/;"	m	class:PainterWidget	file:
staticMetaObjectExtraData	moc_Controller.cpp	/^const QMetaObjectExtraData Controller::staticMetaObjectExtraData = {$/;"	m	class:Controller	file:
staticMetaObjectExtraData	moc_PainterWidget.cpp	/^const QMetaObjectExtraData PainterWidget::staticMetaObjectExtraData = {$/;"	m	class:PainterWidget	file:
subtract	Vector.cpp	/^void Vector::subtract(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
subtract	Vector.h	/^    void subtract(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
translate	Vector.cpp	/^void Vector::translate(const Vector& vector)$/;"	f	class:Vector	signature:(const Vector& vector)
translate	Vector.h	/^    void translate(const Vector&);$/;"	p	class:Vector	access:public	signature:(const Vector&)
ui	ViewKnot.h	/^    Ui::MainWindow ui;$/;"	m	class:ViewKnot	access:private
update	Controller.cpp	/^void Controller::update()$/;"	f	class:Controller	signature:()
update	Controller.h	/^    void update();$/;"	p	class:Controller	access:public	signature:()
v	Line.h	/^    Vector v[2];$/;"	m	class:Line	access:private
verticalLayout	ui_MainWindow.h	/^    QVBoxLayout *verticalLayout;$/;"	m	class:Ui_MainWindow	access:public
view	Model.h	/^    View* view;$/;"	m	class:Model	access:private
x	Vector.h	/^    double x[4];$/;"	m	class:Vector	access:private
x	Vector.h	/^    int x[2];$/;"	m	struct:Vector2D	access:public
~Controller	Controller.cpp	/^Controller::~Controller()$/;"	f	class:Controller	signature:()
~Controller	Controller.h	/^    ~Controller();$/;"	p	class:Controller	access:public	signature:()
~Line	Line.h	/^    virtual ~Line ();$/;"	p	class:Line	access:public	signature:()
~Model	Model.cpp	/^Model::~Model()$/;"	f	class:Model	signature:()
~Model	Model.h	/^    ~Model();$/;"	p	class:Model	access:public	signature:()
~PainterWidget	PainterWidget.cpp	/^PainterWidget::~PainterWidget()$/;"	f	class:PainterWidget	signature:()
~PainterWidget	PainterWidget.h	/^    ~PainterWidget();$/;"	p	class:PainterWidget	access:public	signature:()
~Vector	Vector.cpp	/^Vector::~Vector() {}$/;"	f	class:Vector	signature:()
~Vector	Vector.h	/^    virtual ~Vector ();$/;"	p	class:Vector	access:public	signature:()
~View	View.h	/^    virtual ~View() {}$/;"	f	class:View	access:public	signature:()
~ViewKnot	ViewKnot.cpp	/^ViewKnot::~ViewKnot()$/;"	f	class:ViewKnot	signature:()
~ViewKnot	ViewKnot.h	/^    virtual ~ViewKnot();$/;"	p	class:ViewKnot	access:public	signature:()
