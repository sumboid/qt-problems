!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR            = ar cqs$/;"	m
BILINEAR	Filter.h	/^enum Filter { NEAREST, BILINEAR }; \/\/Not bad to realize factory$/;"	e	enum:Filter
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
Controller	Controller.cpp	/^Controller::Controller(View* view): step(0)$/;"	f	class:Controller	signature:(View* view)
Controller	Controller.h	/^    Controller(View* view);$/;"	p	class:Controller	access:public	signature:(View* view)
Controller	Controller.h	/^class Controller : public QObject$/;"	c	inherits:QObject
Controller::Controller	Controller.cpp	/^Controller::Controller(View* view): step(0)$/;"	f	class:Controller	signature:(View* view)
Controller::Controller	Controller.h	/^    Controller(View* view);$/;"	p	class:Controller	access:public	signature:(View* view)
Controller::getStaticMetaObject	moc_Controller.cpp	/^const QMetaObject &Controller::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Controller	signature:()
Controller::init	Controller.cpp	/^void Controller::init()$/;"	f	class:Controller	signature:()
Controller::init	Controller.h	/^    void init();$/;"	p	class:Controller	access:public	signature:()
Controller::metaObject	moc_Controller.cpp	/^const QMetaObject *Controller::metaObject() const$/;"	f	class:Controller	signature:() const
Controller::model	Controller.h	/^    Model* model;$/;"	m	class:Controller	access:private
Controller::nextStep	Controller.cpp	/^void Controller::nextStep()$/;"	f	class:Controller	signature:()
Controller::nextStep	Controller.h	/^    void nextStep();$/;"	p	class:Controller	access:public	signature:()
Controller::qt_metacall	moc_Controller.cpp	/^int Controller::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QMetaObject::Call _c, int _id, void **_a)
Controller::qt_metacast	moc_Controller.cpp	/^void *Controller::qt_metacast(const char *_clname)$/;"	f	class:Controller	signature:(const char *_clname)
Controller::qt_static_metacall	moc_Controller.cpp	/^void Controller::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
Controller::resize	Controller.cpp	/^void Controller::resize()$/;"	f	class:Controller	signature:()
Controller::resize	Controller.h	/^    void resize();$/;"	p	class:Controller	access:public	signature:()
Controller::setBlend	Controller.cpp	/^void Controller::setBlend(const int blend)$/;"	f	class:Controller	signature:(const int blend)
Controller::setBlend	Controller.h	/^    void setBlend(const int);$/;"	p	class:Controller	access:public	signature:(const int)
Controller::setFilter	Controller.cpp	/^void Controller::setFilter(const int filter)$/;"	f	class:Controller	signature:(const int filter)
Controller::setFilter	Controller.h	/^    void setFilter(const int);$/;"	p	class:Controller	access:public	signature:(const int)
Controller::setStep	Controller.cpp	/^void Controller::setStep(const int _step)$/;"	f	class:Controller	signature:(const int _step)
Controller::setStep	Controller.h	/^    void setStep(const int);$/;"	p	class:Controller	access:public	signature:(const int)
Controller::start	Controller.cpp	/^void Controller::start()$/;"	f	class:Controller	signature:()
Controller::start	Controller.h	/^    void start();$/;"	p	class:Controller	access:public	signature:()
Controller::staticMetaObject	moc_Controller.cpp	/^const QMetaObject Controller::staticMetaObject = {$/;"	m	class:Controller	file:
Controller::staticMetaObjectExtraData	moc_Controller.cpp	/^const QMetaObjectExtraData Controller::staticMetaObjectExtraData = {$/;"	m	class:Controller	file:
Controller::step	Controller.h	/^    int step;$/;"	m	class:Controller	access:private
Controller::stop	Controller.cpp	/^void Controller::stop()$/;"	f	class:Controller	signature:()
Controller::stop	Controller.h	/^    void stop();$/;"	p	class:Controller	access:public	signature:()
Controller::timer	Controller.h	/^    QTimer timer;$/;"	m	class:Controller	access:private
Controller::update	Controller.cpp	/^void Controller::update()$/;"	f	class:Controller	signature:()
Controller::update	Controller.h	/^    void update();$/;"	p	class:Controller	access:public	signature:()
Controller::~Controller	Controller.cpp	/^Controller::~Controller()$/;"	f	class:Controller	signature:()
Controller::~Controller	Controller.h	/^    ~Controller();$/;"	p	class:Controller	access:public	signature:()
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
EQUAL	Triangle.cpp	22;"	d	file:
Filter	Filter.h	/^enum Filter { NEAREST, BILINEAR }; \/\/Not bad to realize factory$/;"	g
INCPATH	Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4 -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
Image	Image.cpp	/^Image::Image(const char* image): original(QImage(image)), filter(NEAREST)$/;"	f	class:Image	signature:(const char* image)
Image	Image.h	/^    Image (const char* image);$/;"	p	class:Image	access:public	signature:(const char* image)
Image	Image.h	/^class Image {$/;"	c
Image::Image	Image.cpp	/^Image::Image(const char* image): original(QImage(image)), filter(NEAREST)$/;"	f	class:Image	signature:(const char* image)
Image::Image	Image.h	/^    Image (const char* image);$/;"	p	class:Image	access:public	signature:(const char* image)
Image::bilinear	Image.h	/^    QImage bilinear;$/;"	m	class:Image	access:private
Image::filter	Image.h	/^    Filter filter;$/;"	m	class:Image	access:private
Image::height	Image.cpp	/^unsigned int Image::height() const$/;"	f	class:Image	signature:() const
Image::height	Image.h	/^    unsigned int height() const;$/;"	p	class:Image	access:public	signature:() const
Image::nearest	Image.h	/^    QImage nearest;$/;"	m	class:Image	access:private
Image::original	Image.h	/^    QImage original;$/;"	m	class:Image	access:private
Image::pixel	Image.cpp	/^unsigned int Image::pixel(const int x, const int y) const$/;"	f	class:Image	signature:(const int x, const int y) const
Image::pixel	Image.h	/^    unsigned int pixel(const int x, const int y) const;$/;"	p	class:Image	access:public	signature:(const int x, const int y) const
Image::rheight	Image.cpp	/^unsigned int Image::rheight() const$/;"	f	class:Image	signature:() const
Image::rheight	Image.h	/^    unsigned int rheight() const;$/;"	p	class:Image	access:public	signature:() const
Image::rwidth	Image.cpp	/^unsigned int Image::rwidth() const$/;"	f	class:Image	signature:() const
Image::rwidth	Image.h	/^    unsigned int rwidth() const;$/;"	p	class:Image	access:public	signature:() const
Image::setFilter	Image.cpp	/^void Image::setFilter(const Filter& _filter)$/;"	f	class:Image	signature:(const Filter& _filter)
Image::setFilter	Image.h	/^    void setFilter(const Filter& filter);$/;"	p	class:Image	access:public	signature:(const Filter& filter)
Image::setScale	Image.cpp	/^void Image::setScale(const double hscale, const double vscale)$/;"	f	class:Image	signature:(const double hscale, const double vscale)
Image::setScale	Image.h	/^    void setScale(const double hscale, const double vscale);$/;"	p	class:Image	access:public	signature:(const double hscale, const double vscale)
Image::width	Image.cpp	/^unsigned int Image::width() const$/;"	f	class:Image	signature:() const
Image::width	Image.h	/^    unsigned int width() const;$/;"	p	class:Image	access:public	signature:() const
Image::~Image	Image.cpp	/^Image::~Image() {};$/;"	f	class:Image	signature:()
Image::~Image	Image.h	/^    ~Image ();$/;"	p	class:Image	access:public	signature:()
LENGTH	Triangle.cpp	77;"	d	file:
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib64\/qt4 -lQtGui -L\/usr\/lib64 -L\/usr\/lib64\/qt4 -L\/usr\/X11R6\/lib -lQtCore -lgthread-2.0 -lrt -lglib-2.0 -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
Line	Line.cpp	/^Line::Line()$/;"	f	class:Line	signature:()
Line	Line.cpp	/^Line::Line(const Point& x, const Point& y): x(x), y(y)$/;"	f	class:Line	signature:(const Point& x, const Point& y)
Line	Line.h	/^    Line();$/;"	p	class:Line	access:public	signature:()
Line	Line.h	/^    Line(const Point& x, const Point& y);$/;"	p	class:Line	access:public	signature:(const Point& x, const Point& y)
Line	Line.h	/^class Line$/;"	c
Line::Line	Line.cpp	/^Line::Line()$/;"	f	class:Line	signature:()
Line::Line	Line.cpp	/^Line::Line(const Point& x, const Point& y): x(x), y(y)$/;"	f	class:Line	signature:(const Point& x, const Point& y)
Line::Line	Line.h	/^    Line();$/;"	p	class:Line	access:public	signature:()
Line::Line	Line.h	/^    Line(const Point& x, const Point& y);$/;"	p	class:Line	access:public	signature:(const Point& x, const Point& y)
Line::deltaX	Line.h	/^    int deltaX, deltaY;$/;"	m	class:Line	access:private
Line::deltaY	Line.h	/^    int deltaX, deltaY;$/;"	m	class:Line	access:private
Line::error	Line.h	/^    int error;$/;"	m	class:Line	access:private
Line::next	Line.cpp	/^Point Line::next()$/;"	f	class:Line	signature:()
Line::next	Line.h	/^    Point next();$/;"	p	class:Line	access:public	signature:()
Line::signX	Line.h	/^    int signX, signY;$/;"	m	class:Line	access:private
Line::signY	Line.h	/^    int signX, signY;$/;"	m	class:Line	access:private
Line::x	Line.h	/^    Point x, y;$/;"	m	class:Line	access:private
Line::y	Line.h	/^    Point x, y;$/;"	m	class:Line	access:private
MAINWINDOW_H	MainWindow.h	2;"	d
MIX	Triangle.cpp	81;"	d	file:
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MSEC_INTERVAL	Controller.cpp	/^    const int MSEC_INTERVAL = 10;$/;"	m	namespace:__anon1	file:
MainWindow	MainWindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow	MainWindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow	MainWindow.h	/^class MainWindow : public QMainWindow$/;"	c	inherits:QMainWindow
MainWindow	ui_MainWindow.h	/^    class MainWindow: public Ui_MainWindow {};$/;"	c	namespace:Ui	inherits:Ui_MainWindow
MainWindow::MainWindow	MainWindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow::MainWindow	MainWindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow::getStaticMetaObject	moc_MainWindow.cpp	/^const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MainWindow	signature:()
MainWindow::metaObject	moc_MainWindow.cpp	/^const QMetaObject *MainWindow::metaObject() const$/;"	f	class:MainWindow	signature:() const
MainWindow::qt_metacall	moc_MainWindow.cpp	/^int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow	signature:(QMetaObject::Call _c, int _id, void **_a)
MainWindow::qt_metacast	moc_MainWindow.cpp	/^void *MainWindow::qt_metacast(const char *_clname)$/;"	f	class:MainWindow	signature:(const char *_clname)
MainWindow::qt_static_metacall	moc_MainWindow.cpp	/^void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
MainWindow::staticMetaObject	moc_MainWindow.cpp	/^const QMetaObject MainWindow::staticMetaObject = {$/;"	m	class:MainWindow	file:
MainWindow::staticMetaObjectExtraData	moc_MainWindow.cpp	/^const QMetaObjectExtraData MainWindow::staticMetaObjectExtraData = {$/;"	m	class:MainWindow	file:
MainWindow::ui	MainWindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
MainWindow::~MainWindow	MainWindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
MainWindow::~MainWindow	MainWindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
Model	Model.cpp	/^Model::Model(View* _view):$/;"	f	class:Model	signature:(View* _view)
Model	Model.h	/^    Model(View* view);$/;"	p	class:Model	access:public	signature:(View* view)
Model	Model.h	/^class Model$/;"	c
Model::Model	Model.cpp	/^Model::Model(View* _view):$/;"	f	class:Model	signature:(View* _view)
Model::Model	Model.h	/^    Model(View* view);$/;"	p	class:Model	access:public	signature:(View* view)
Model::angles	Model.h	/^    double angles[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
Model::draw	Model.cpp	/^void Model::draw()$/;"	f	class:Model	signature:()
Model::draw	Model.h	/^    void draw();$/;"	p	class:Model	access:public	signature:()
Model::getHScale	Model.cpp	/^double Model::getHScale() const$/;"	f	class:Model	signature:() const
Model::getHScale	Model.h	/^    double getHScale() const;$/;"	p	class:Model	access:private	signature:() const
Model::getInfo	Model.h	/^    void getInfo(const int x, const int y);$/;"	p	class:Model	access:public	signature:(const int x, const int y)
Model::getTriangleAngle	Model.cpp	/^double Model::getTriangleAngle(const int number)$/;"	f	class:Model	signature:(const int number)
Model::getTriangleAngle	Model.h	/^    double getTriangleAngle(const int);$/;"	p	class:Model	access:private	signature:(const int)
Model::getTrianglePosition	Model.cpp	/^Point Model::getTrianglePosition(const int number)$/;"	f	class:Model	signature:(const int number)
Model::getTrianglePosition	Model.h	/^    Point getTrianglePosition(const int);$/;"	p	class:Model	access:private	signature:(const int)
Model::getVScale	Model.cpp	/^double Model::getVScale() const$/;"	f	class:Model	signature:() const
Model::getVScale	Model.h	/^    double getVScale() const;$/;"	p	class:Model	access:private	signature:() const
Model::image	Model.h	/^    Image image;$/;"	m	class:Model	access:private
Model::init	Model.cpp	/^void Model::init()$/;"	f	class:Model	signature:()
Model::init	Model.h	/^    void init();$/;"	p	class:Model	access:public	signature:()
Model::invertButton	Model.cpp	/^void Model::invertButton(bool state)$/;"	f	class:Model	signature:(bool state)
Model::invertButton	Model.h	/^    void invertButton(bool);$/;"	p	class:Model	access:public	signature:(bool)
Model::lastPoints	Model.h	/^    std::pair<double, double> lastPoints[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
Model::resize	Model.cpp	/^void Model::resize()$/;"	f	class:Model	signature:()
Model::resize	Model.h	/^    void resize();$/;"	p	class:Model	access:public	signature:()
Model::setBlend	Model.cpp	/^void Model::setBlend(const int blend)$/;"	f	class:Model	signature:(const int blend)
Model::setBlend	Model.h	/^    void setBlend(const int);$/;"	p	class:Model	access:public	signature:(const int)
Model::setFilter	Model.cpp	/^void Model::setFilter(const int _filter)$/;"	f	class:Model	signature:(const int _filter)
Model::setFilter	Model.h	/^    void setFilter(const int);$/;"	p	class:Model	access:public	signature:(const int)
Model::setStep	Model.cpp	/^void Model::setStep(const int _step)$/;"	f	class:Model	signature:(const int _step)
Model::setStep	Model.h	/^    void setStep(const int);$/;"	p	class:Model	access:public	signature:(const int)
Model::setTrianglePoints	Model.cpp	/^void Model::setTrianglePoints(Triangle& triangle, const int number)$/;"	f	class:Model	signature:(Triangle& triangle, const int number)
Model::setTrianglePoints	Model.h	/^    void setTrianglePoints(Triangle& triangle, const int number);$/;"	p	class:Model	access:private	signature:(Triangle& triangle, const int number)
Model::step	Model.h	/^    int step;$/;"	m	class:Model	access:private
Model::triangles	Model.h	/^    Triangle* triangles[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
Model::view	Model.h	/^    View* view;$/;"	m	class:Model	access:private
Model::~Model	Model.cpp	/^Model::~Model()$/;"	f	class:Model	signature:()
Model::~Model	Model.h	/^    ~Model();$/;"	p	class:Model	access:public	signature:()
NEAREST	Filter.h	/^enum Filter { NEAREST, BILINEAR }; \/\/Not bad to realize factory$/;"	e	enum:Filter
NUMBER_OF_TRIANGLES	Model.h	/^const int NUMBER_OF_TRIANGLES = 32;$/;"	v
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
PainterWidget	PainterWidget.cpp	/^PainterWidget::PainterWidget(Controller* _controller):$/;"	f	class:PainterWidget	signature:(Controller* _controller)
PainterWidget	PainterWidget.h	/^    PainterWidget(Controller* controller);$/;"	p	class:PainterWidget	access:public	signature:(Controller* controller)
PainterWidget	PainterWidget.h	/^class PainterWidget : public QWidget$/;"	c	inherits:QWidget
PainterWidget::PainterWidget	PainterWidget.cpp	/^PainterWidget::PainterWidget(Controller* _controller):$/;"	f	class:PainterWidget	signature:(Controller* _controller)
PainterWidget::PainterWidget	PainterWidget.h	/^    PainterWidget(Controller* controller);$/;"	p	class:PainterWidget	access:public	signature:(Controller* controller)
PainterWidget::clear	PainterWidget.cpp	/^void PainterWidget::clear()$/;"	f	class:PainterWidget	signature:()
PainterWidget::clear	PainterWidget.h	/^    void clear();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::controller	PainterWidget.h	/^    Controller* controller;$/;"	m	class:PainterWidget	access:private
PainterWidget::getColor	PainterWidget.cpp	/^unsigned int PainterWidget::getColor(int x, int y)$/;"	f	class:PainterWidget	signature:(int x, int y)
PainterWidget::getColor	PainterWidget.h	/^    unsigned int getColor(int x, int y);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y)
PainterWidget::getHeight	PainterWidget.cpp	/^int PainterWidget::getHeight()$/;"	f	class:PainterWidget	signature:()
PainterWidget::getHeight	PainterWidget.h	/^    int getHeight();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::getStaticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject &PainterWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PainterWidget	signature:()
PainterWidget::getWidth	PainterWidget.cpp	/^int PainterWidget::getWidth()$/;"	f	class:PainterWidget	signature:()
PainterWidget::getWidth	PainterWidget.h	/^    int getWidth();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::image	PainterWidget.h	/^    QImage image;$/;"	m	class:PainterWidget	access:private
PainterWidget::metaObject	moc_PainterWidget.cpp	/^const QMetaObject *PainterWidget::metaObject() const$/;"	f	class:PainterWidget	signature:() const
PainterWidget::paint	PainterWidget.cpp	/^void PainterWidget::paint()$/;"	f	class:PainterWidget	signature:()
PainterWidget::paint	PainterWidget.h	/^    void paint();$/;"	p	class:PainterWidget	access:public	signature:()
PainterWidget::paintEvent	PainterWidget.cpp	/^void PainterWidget::paintEvent(QPaintEvent*)$/;"	f	class:PainterWidget	signature:(QPaintEvent*)
PainterWidget::paintEvent	PainterWidget.h	/^    virtual void paintEvent(QPaintEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QPaintEvent*)
PainterWidget::qt_metacall	moc_PainterWidget.cpp	/^int PainterWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
PainterWidget::qt_metacast	moc_PainterWidget.cpp	/^void *PainterWidget::qt_metacast(const char *_clname)$/;"	f	class:PainterWidget	signature:(const char *_clname)
PainterWidget::qt_static_metacall	moc_PainterWidget.cpp	/^void PainterWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
PainterWidget::resizeEvent	PainterWidget.cpp	/^void PainterWidget::resizeEvent(QResizeEvent*)$/;"	f	class:PainterWidget	signature:(QResizeEvent*)
PainterWidget::resizeEvent	PainterWidget.h	/^    virtual void resizeEvent(QResizeEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QResizeEvent*)
PainterWidget::setPixel	PainterWidget.cpp	/^void PainterWidget::setPixel(int x, int y, QRgb color)$/;"	f	class:PainterWidget	signature:(int x, int y, QRgb color)
PainterWidget::setPixel	PainterWidget.h	/^    void setPixel(int x, int y, unsigned int color);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y, unsigned int color)
PainterWidget::staticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject PainterWidget::staticMetaObject = {$/;"	m	class:PainterWidget	file:
PainterWidget::staticMetaObjectExtraData	moc_PainterWidget.cpp	/^const QMetaObjectExtraData PainterWidget::staticMetaObjectExtraData = {$/;"	m	class:PainterWidget	file:
PainterWidget::~PainterWidget	PainterWidget.cpp	/^PainterWidget::~PainterWidget()$/;"	f	class:PainterWidget	signature:()
PainterWidget::~PainterWidget	PainterWidget.h	/^    ~PainterWidget();$/;"	p	class:PainterWidget	access:public	signature:()
Point	Point.h	/^typedef std::pair<int, int> Point;$/;"	t
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = FIT9201SUMBATYANTS_Puzzle$/;"	m
RANLIB	Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = main.cpp \\$/;"	m
START_SPEED	ViewPuzzle.cpp	/^    const int START_SPEED = 5000;$/;"	m	namespace:__anon2	file:
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = FIT9201SUMBATYANTS_Puzzle$/;"	m
TRIANGLE_H	Triangle.h	2;"	d
Triangle	Triangle.cpp	/^Triangle::Triangle(View* _view, const Image* _image):$/;"	f	class:Triangle	signature:(View* _view, const Image* _image)
Triangle	Triangle.h	/^    Triangle(View *, const Image *);$/;"	p	class:Triangle	access:public	signature:(View *, const Image *)
Triangle	Triangle.h	/^class Triangle$/;"	c
Triangle::Triangle	Triangle.cpp	/^Triangle::Triangle(View* _view, const Image* _image):$/;"	f	class:Triangle	signature:(View* _view, const Image* _image)
Triangle::Triangle	Triangle.h	/^    Triangle(View *, const Image *);$/;"	p	class:Triangle	access:public	signature:(View *, const Image *)
Triangle::allPixels	Triangle.h	/^    int allPixels;$/;"	m	class:Triangle	access:private
Triangle::blend	Triangle.h	/^    bool blend;$/;"	m	class:Triangle	access:private
Triangle::borderPixels	Triangle.h	/^    int borderPixels;$/;"	m	class:Triangle	access:private
Triangle::checkPoint	Triangle.cpp	/^bool Triangle::checkPoint(const Point& point) const$/;"	f	class:Triangle	signature:(const Point& point) const
Triangle::checkPoint	Triangle.h	/^    bool checkPoint(const Point& point) const;$/;"	p	class:Triangle	access:public	signature:(const Point& point) const
Triangle::draw	Triangle.cpp	/^void Triangle::draw(const Point& x, const double _angle)$/;"	f	class:Triangle	signature:(const Point& x, const double _angle)
Triangle::draw	Triangle.h	/^    void draw(const Point& x, const double angle);$/;"	p	class:Triangle	access:public	signature:(const Point& x, const double angle)
Triangle::getColor	Triangle.cpp	/^unsigned int Triangle::getColor(const Point& d)$/;"	f	class:Triangle	signature:(const Point& d)
Triangle::getColor	Triangle.h	/^    unsigned int getColor(const Point& x);$/;"	p	class:Triangle	access:private	signature:(const Point& x)
Triangle::getInfo	Triangle.cpp	/^const char* Triangle::getInfo() const$/;"	f	class:Triangle	signature:() const
Triangle::getInfo	Triangle.h	/^    const char* getInfo() const;$/;"	p	class:Triangle	access:public	signature:() const
Triangle::image	Triangle.h	/^    const Image* image;$/;"	m	class:Triangle	access:private
Triangle::imagePoints	Triangle.h	/^    Point imagePoints[3]; \/* [c], [a], [b] *\/$/;"	m	class:Triangle	access:private
Triangle::points	Triangle.h	/^    Point points[3]; \/* [c], [a], [b] *\/$/;"	m	class:Triangle	access:private
Triangle::setBlend	Triangle.cpp	/^void Triangle::setBlend(const bool _blend)$/;"	f	class:Triangle	signature:(const bool _blend)
Triangle::setBlend	Triangle.h	/^    void setBlend(const bool);$/;"	p	class:Triangle	access:public	signature:(const bool)
Triangle::setImageCoordinates	Triangle.cpp	/^void Triangle::setImageCoordinates(const Point* coordinates)$/;"	f	class:Triangle	signature:(const Point* coordinates)
Triangle::setImageCoordinates	Triangle.h	/^    void setImageCoordinates(const Point*);$/;"	p	class:Triangle	access:public	signature:(const Point*)
Triangle::setPoints	Triangle.cpp	/^void Triangle::setPoints(const Point& x, const double _angle)$/;"	f	class:Triangle	signature:(const Point& x, const double _angle)
Triangle::setPoints	Triangle.h	/^    void setPoints(const Point& x, const double _angle);$/;"	p	class:Triangle	access:private	signature:(const Point& x, const double _angle)
Triangle::transparentPixels	Triangle.h	/^    int transparentPixels;$/;"	m	class:Triangle	access:private
Triangle::view	Triangle.h	/^    View* view;$/;"	m	class:Triangle	access:private
UI_MAINWINDOW_H	ui_MainWindow.h	11;"	d
Ui	MainWindow.h	/^namespace Ui {$/;"	n
Ui	ViewPuzzle.h	/^namespace Ui$/;"	n
Ui	ui_MainWindow.h	/^namespace Ui {$/;"	n
Ui::MainWindow	ui_MainWindow.h	/^    class MainWindow: public Ui_MainWindow {};$/;"	c	namespace:Ui	inherits:Ui_MainWindow
Ui_MainWindow	ui_MainWindow.h	/^class Ui_MainWindow$/;"	c
Ui_MainWindow::blendCheckBox	ui_MainWindow.h	/^    QCheckBox *blendCheckBox;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::controlWidget	ui_MainWindow.h	/^    QWidget *controlWidget;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::dial	ui_MainWindow.h	/^    QDial *dial;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::dialLabelWidget	ui_MainWindow.h	/^    QWidget *dialLabelWidget;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::filterCheckBox	ui_MainWindow.h	/^    QCheckBox *filterCheckBox;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::horizontalLayout_2	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout_2;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::horizontalLayout_3	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout_3;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::initButton	ui_MainWindow.h	/^    QPushButton *initButton;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::mainWidget	ui_MainWindow.h	/^    QWidget *mainWidget;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::maxLabel	ui_MainWindow.h	/^    QLabel *maxLabel;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::minLabel	ui_MainWindow.h	/^    QLabel *minLabel;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::retranslateUi	ui_MainWindow.h	/^    void retranslateUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
Ui_MainWindow::setupUi	ui_MainWindow.h	/^    void setupUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
Ui_MainWindow::startButton	ui_MainWindow.h	/^    QPushButton *startButton;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::statusBar	ui_MainWindow.h	/^    QStatusBar *statusBar;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::stopButton	ui_MainWindow.h	/^    QPushButton *stopButton;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::verticalLayout_2	ui_MainWindow.h	/^    QVBoxLayout *verticalLayout_2;$/;"	m	class:Ui_MainWindow	access:public
Ui_MainWindow::verticalSpacer	ui_MainWindow.h	/^    QSpacerItem *verticalSpacer;$/;"	m	class:Ui_MainWindow	access:public
VIEW_H	View.h	2;"	d
View	View.h	/^class View$/;"	c
View::clear	View.h	/^    virtual void clear() = 0;$/;"	p	class:View	access:public	signature:()
View::getColor	View.h	/^    virtual unsigned int getColor(int x, int y) = 0;$/;"	p	class:View	access:public	signature:(int x, int y)
View::getHeight	View.h	/^    virtual int getHeight() = 0;$/;"	p	class:View	access:public	signature:()
View::getWidth	View.h	/^    virtual int getWidth() = 0;$/;"	p	class:View	access:public	signature:()
View::invertButton	View.h	/^    virtual void invertButton(bool state) = 0;$/;"	p	class:View	access:public	signature:(bool state)
View::paint	View.h	/^    virtual void paint() = 0;$/;"	p	class:View	access:public	signature:()
View::setDial	View.h	/^    virtual void setDial(const int) = 0;$/;"	p	class:View	access:public	signature:(const int)
View::setPixel	View.h	/^    virtual void setPixel(int x, int y, unsigned int color) = 0;$/;"	p	class:View	access:public	signature:(int x, int y, unsigned int color)
View::~View	View.h	/^    virtual ~View() {}$/;"	f	class:View	access:public	signature:()
ViewPuzzle	ViewPuzzle.cpp	/^ViewPuzzle::ViewPuzzle()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle	ViewPuzzle.h	/^    ViewPuzzle();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle	ViewPuzzle.h	/^class ViewPuzzle: public View, public QObject$/;"	c	inherits:View,QObject
ViewPuzzle::ViewPuzzle	ViewPuzzle.cpp	/^ViewPuzzle::ViewPuzzle()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::ViewPuzzle	ViewPuzzle.h	/^    ViewPuzzle();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle::clear	ViewPuzzle.cpp	/^void ViewPuzzle::clear()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::clear	ViewPuzzle.h	/^    virtual void clear();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle::controller	ViewPuzzle.h	/^    Controller* controller;$/;"	m	class:ViewPuzzle	access:private
ViewPuzzle::getColor	ViewPuzzle.cpp	/^unsigned int ViewPuzzle::getColor(int x, int y)$/;"	f	class:ViewPuzzle	signature:(int x, int y)
ViewPuzzle::getColor	ViewPuzzle.h	/^    virtual unsigned int getColor(int x, int y);$/;"	p	class:ViewPuzzle	access:public	signature:(int x, int y)
ViewPuzzle::getHeight	ViewPuzzle.cpp	/^int ViewPuzzle::getHeight()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::getHeight	ViewPuzzle.h	/^    virtual int getHeight();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle::getWidth	ViewPuzzle.cpp	/^int ViewPuzzle::getWidth()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::getWidth	ViewPuzzle.h	/^    virtual int getWidth();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle::invertButton	ViewPuzzle.cpp	/^void ViewPuzzle::invertButton(bool state)$/;"	f	class:ViewPuzzle	signature:(bool state)
ViewPuzzle::invertButton	ViewPuzzle.h	/^    virtual void invertButton(bool state);$/;"	p	class:ViewPuzzle	access:public	signature:(bool state)
ViewPuzzle::mainWindow	ViewPuzzle.h	/^    QMainWindow mainWindow;$/;"	m	class:ViewPuzzle	access:private
ViewPuzzle::paint	ViewPuzzle.cpp	/^void ViewPuzzle::paint()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::paint	ViewPuzzle.h	/^    virtual void paint();$/;"	p	class:ViewPuzzle	access:public	signature:()
ViewPuzzle::painterWidget	ViewPuzzle.h	/^    PainterWidget* painterWidget;$/;"	m	class:ViewPuzzle	access:private
ViewPuzzle::setDial	ViewPuzzle.cpp	/^void ViewPuzzle::setDial(const int step)$/;"	f	class:ViewPuzzle	signature:(const int step)
ViewPuzzle::setDial	ViewPuzzle.h	/^    virtual void setDial(const int);$/;"	p	class:ViewPuzzle	access:public	signature:(const int)
ViewPuzzle::setPixel	ViewPuzzle.cpp	/^void ViewPuzzle::setPixel(int x, int y, unsigned int color)$/;"	f	class:ViewPuzzle	signature:(int x, int y, unsigned int color)
ViewPuzzle::setPixel	ViewPuzzle.h	/^    virtual void setPixel(int x, int y, unsigned int color);$/;"	p	class:ViewPuzzle	access:public	signature:(int x, int y, unsigned int color)
ViewPuzzle::ui	ViewPuzzle.h	/^    Ui::MainWindow ui;$/;"	m	class:ViewPuzzle	access:private
ViewPuzzle::~ViewPuzzle	ViewPuzzle.cpp	/^ViewPuzzle::~ViewPuzzle()$/;"	f	class:ViewPuzzle	signature:()
ViewPuzzle::~ViewPuzzle	ViewPuzzle.h	/^    virtual ~ViewPuzzle();$/;"	p	class:ViewPuzzle	access:public	signature:()
__anon1::MSEC_INTERVAL	Controller.cpp	/^    const int MSEC_INTERVAL = 10;$/;"	m	namespace:__anon1	file:
__anon2::START_SPEED	ViewPuzzle.cpp	/^    const int START_SPEED = 5000;$/;"	m	namespace:__anon2	file:
allPixels	Triangle.h	/^    int allPixels;$/;"	m	class:Triangle	access:private
angles	Model.h	/^    double angles[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
bilinear	Image.h	/^    QImage bilinear;$/;"	m	class:Image	access:private
blend	Triangle.h	/^    bool blend;$/;"	m	class:Triangle	access:private
blendCheckBox	ui_MainWindow.h	/^    QCheckBox *blendCheckBox;$/;"	m	class:Ui_MainWindow	access:public
borderPixels	Triangle.h	/^    int borderPixels;$/;"	m	class:Triangle	access:private
checkPoint	Triangle.cpp	/^bool Triangle::checkPoint(const Point& point) const$/;"	f	class:Triangle	signature:(const Point& point) const
checkPoint	Triangle.h	/^    bool checkPoint(const Point& point) const;$/;"	p	class:Triangle	access:public	signature:(const Point& point) const
clear	PainterWidget.cpp	/^void PainterWidget::clear()$/;"	f	class:PainterWidget	signature:()
clear	PainterWidget.h	/^    void clear();$/;"	p	class:PainterWidget	access:public	signature:()
clear	View.h	/^    virtual void clear() = 0;$/;"	p	class:View	access:public	signature:()
clear	ViewPuzzle.cpp	/^void ViewPuzzle::clear()$/;"	f	class:ViewPuzzle	signature:()
clear	ViewPuzzle.h	/^    virtual void clear();$/;"	p	class:ViewPuzzle	access:public	signature:()
controlWidget	ui_MainWindow.h	/^    QWidget *controlWidget;$/;"	m	class:Ui_MainWindow	access:public
controller	PainterWidget.h	/^    Controller* controller;$/;"	m	class:PainterWidget	access:private
controller	ViewPuzzle.h	/^    Controller* controller;$/;"	m	class:ViewPuzzle	access:private
deltaX	Line.h	/^    int deltaX, deltaY;$/;"	m	class:Line	access:private
deltaY	Line.h	/^    int deltaX, deltaY;$/;"	m	class:Line	access:private
dial	ui_MainWindow.h	/^    QDial *dial;$/;"	m	class:Ui_MainWindow	access:public
dialLabelWidget	ui_MainWindow.h	/^    QWidget *dialLabelWidget;$/;"	m	class:Ui_MainWindow	access:public
draw	Model.cpp	/^void Model::draw()$/;"	f	class:Model	signature:()
draw	Model.h	/^    void draw();$/;"	p	class:Model	access:public	signature:()
draw	Triangle.cpp	/^void Triangle::draw(const Point& x, const double _angle)$/;"	f	class:Triangle	signature:(const Point& x, const double _angle)
draw	Triangle.h	/^    void draw(const Point& x, const double angle);$/;"	p	class:Triangle	access:public	signature:(const Point& x, const double angle)
error	Line.h	/^    int error;$/;"	m	class:Line	access:private
filter	Image.h	/^    Filter filter;$/;"	m	class:Image	access:private
filterCheckBox	ui_MainWindow.h	/^    QCheckBox *filterCheckBox;$/;"	m	class:Ui_MainWindow	access:public
getColor	PainterWidget.cpp	/^unsigned int PainterWidget::getColor(int x, int y)$/;"	f	class:PainterWidget	signature:(int x, int y)
getColor	PainterWidget.h	/^    unsigned int getColor(int x, int y);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y)
getColor	Triangle.cpp	/^unsigned int Triangle::getColor(const Point& d)$/;"	f	class:Triangle	signature:(const Point& d)
getColor	Triangle.h	/^    unsigned int getColor(const Point& x);$/;"	p	class:Triangle	access:private	signature:(const Point& x)
getColor	View.h	/^    virtual unsigned int getColor(int x, int y) = 0;$/;"	p	class:View	access:public	signature:(int x, int y)
getColor	ViewPuzzle.cpp	/^unsigned int ViewPuzzle::getColor(int x, int y)$/;"	f	class:ViewPuzzle	signature:(int x, int y)
getColor	ViewPuzzle.h	/^    virtual unsigned int getColor(int x, int y);$/;"	p	class:ViewPuzzle	access:public	signature:(int x, int y)
getHScale	Model.cpp	/^double Model::getHScale() const$/;"	f	class:Model	signature:() const
getHScale	Model.h	/^    double getHScale() const;$/;"	p	class:Model	access:private	signature:() const
getHeight	PainterWidget.cpp	/^int PainterWidget::getHeight()$/;"	f	class:PainterWidget	signature:()
getHeight	PainterWidget.h	/^    int getHeight();$/;"	p	class:PainterWidget	access:public	signature:()
getHeight	View.h	/^    virtual int getHeight() = 0;$/;"	p	class:View	access:public	signature:()
getHeight	ViewPuzzle.cpp	/^int ViewPuzzle::getHeight()$/;"	f	class:ViewPuzzle	signature:()
getHeight	ViewPuzzle.h	/^    virtual int getHeight();$/;"	p	class:ViewPuzzle	access:public	signature:()
getInfo	Model.h	/^    void getInfo(const int x, const int y);$/;"	p	class:Model	access:public	signature:(const int x, const int y)
getInfo	Triangle.cpp	/^const char* Triangle::getInfo() const$/;"	f	class:Triangle	signature:() const
getInfo	Triangle.h	/^    const char* getInfo() const;$/;"	p	class:Triangle	access:public	signature:() const
getStaticMetaObject	moc_Controller.cpp	/^const QMetaObject &Controller::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Controller	signature:()
getStaticMetaObject	moc_MainWindow.cpp	/^const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MainWindow	signature:()
getStaticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject &PainterWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PainterWidget	signature:()
getTriangleAngle	Model.cpp	/^double Model::getTriangleAngle(const int number)$/;"	f	class:Model	signature:(const int number)
getTriangleAngle	Model.h	/^    double getTriangleAngle(const int);$/;"	p	class:Model	access:private	signature:(const int)
getTrianglePosition	Model.cpp	/^Point Model::getTrianglePosition(const int number)$/;"	f	class:Model	signature:(const int number)
getTrianglePosition	Model.h	/^    Point getTrianglePosition(const int);$/;"	p	class:Model	access:private	signature:(const int)
getVScale	Model.cpp	/^double Model::getVScale() const$/;"	f	class:Model	signature:() const
getVScale	Model.h	/^    double getVScale() const;$/;"	p	class:Model	access:private	signature:() const
getWidth	PainterWidget.cpp	/^int PainterWidget::getWidth()$/;"	f	class:PainterWidget	signature:()
getWidth	PainterWidget.h	/^    int getWidth();$/;"	p	class:PainterWidget	access:public	signature:()
getWidth	View.h	/^    virtual int getWidth() = 0;$/;"	p	class:View	access:public	signature:()
getWidth	ViewPuzzle.cpp	/^int ViewPuzzle::getWidth()$/;"	f	class:ViewPuzzle	signature:()
getWidth	ViewPuzzle.h	/^    virtual int getWidth();$/;"	p	class:ViewPuzzle	access:public	signature:()
height	Image.cpp	/^unsigned int Image::height() const$/;"	f	class:Image	signature:() const
height	Image.h	/^    unsigned int height() const;$/;"	p	class:Image	access:public	signature:() const
horizontalLayout_2	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout_2;$/;"	m	class:Ui_MainWindow	access:public
horizontalLayout_3	ui_MainWindow.h	/^    QHBoxLayout *horizontalLayout_3;$/;"	m	class:Ui_MainWindow	access:public
image	Model.h	/^    Image image;$/;"	m	class:Model	access:private
image	PainterWidget.h	/^    QImage image;$/;"	m	class:PainterWidget	access:private
image	Triangle.h	/^    const Image* image;$/;"	m	class:Triangle	access:private
imagePoints	Triangle.h	/^    Point imagePoints[3]; \/* [c], [a], [b] *\/$/;"	m	class:Triangle	access:private
init	Controller.cpp	/^void Controller::init()$/;"	f	class:Controller	signature:()
init	Controller.h	/^    void init();$/;"	p	class:Controller	access:public	signature:()
init	Model.cpp	/^void Model::init()$/;"	f	class:Model	signature:()
init	Model.h	/^    void init();$/;"	p	class:Model	access:public	signature:()
initButton	ui_MainWindow.h	/^    QPushButton *initButton;$/;"	m	class:Ui_MainWindow	access:public
invertButton	Model.cpp	/^void Model::invertButton(bool state)$/;"	f	class:Model	signature:(bool state)
invertButton	Model.h	/^    void invertButton(bool);$/;"	p	class:Model	access:public	signature:(bool)
invertButton	View.h	/^    virtual void invertButton(bool state) = 0;$/;"	p	class:View	access:public	signature:(bool state)
invertButton	ViewPuzzle.cpp	/^void ViewPuzzle::invertButton(bool state)$/;"	f	class:ViewPuzzle	signature:(bool state)
invertButton	ViewPuzzle.h	/^    virtual void invertButton(bool state);$/;"	p	class:ViewPuzzle	access:public	signature:(bool state)
lastPoints	Model.h	/^    std::pair<double, double> lastPoints[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
mainWidget	ui_MainWindow.h	/^    QWidget *mainWidget;$/;"	m	class:Ui_MainWindow	access:public
mainWindow	ViewPuzzle.h	/^    QMainWindow mainWindow;$/;"	m	class:ViewPuzzle	access:private
max	Model.cpp	58;"	d	file:
maxLabel	ui_MainWindow.h	/^    QLabel *maxLabel;$/;"	m	class:Ui_MainWindow	access:public
metaObject	moc_Controller.cpp	/^const QMetaObject *Controller::metaObject() const$/;"	f	class:Controller	signature:() const
metaObject	moc_MainWindow.cpp	/^const QMetaObject *MainWindow::metaObject() const$/;"	f	class:MainWindow	signature:() const
metaObject	moc_PainterWidget.cpp	/^const QMetaObject *PainterWidget::metaObject() const$/;"	f	class:PainterWidget	signature:() const
minLabel	ui_MainWindow.h	/^    QLabel *minLabel;$/;"	m	class:Ui_MainWindow	access:public
model	Controller.h	/^    Model* model;$/;"	m	class:Controller	access:private
nearest	Image.h	/^    QImage nearest;$/;"	m	class:Image	access:private
next	Line.cpp	/^Point Line::next()$/;"	f	class:Line	signature:()
next	Line.h	/^    Point next();$/;"	p	class:Line	access:public	signature:()
nextStep	Controller.cpp	/^void Controller::nextStep()$/;"	f	class:Controller	signature:()
nextStep	Controller.h	/^    void nextStep();$/;"	p	class:Controller	access:public	signature:()
original	Image.h	/^    QImage original;$/;"	m	class:Image	access:private
paint	PainterWidget.cpp	/^void PainterWidget::paint()$/;"	f	class:PainterWidget	signature:()
paint	PainterWidget.h	/^    void paint();$/;"	p	class:PainterWidget	access:public	signature:()
paint	View.h	/^    virtual void paint() = 0;$/;"	p	class:View	access:public	signature:()
paint	ViewPuzzle.cpp	/^void ViewPuzzle::paint()$/;"	f	class:ViewPuzzle	signature:()
paint	ViewPuzzle.h	/^    virtual void paint();$/;"	p	class:ViewPuzzle	access:public	signature:()
paintEvent	PainterWidget.cpp	/^void PainterWidget::paintEvent(QPaintEvent*)$/;"	f	class:PainterWidget	signature:(QPaintEvent*)
paintEvent	PainterWidget.h	/^    virtual void paintEvent(QPaintEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QPaintEvent*)
painterWidget	ViewPuzzle.h	/^    PainterWidget* painterWidget;$/;"	m	class:ViewPuzzle	access:private
pixel	Image.cpp	/^unsigned int Image::pixel(const int x, const int y) const$/;"	f	class:Image	signature:(const int x, const int y) const
pixel	Image.h	/^    unsigned int pixel(const int x, const int y) const;$/;"	p	class:Image	access:public	signature:(const int x, const int y) const
points	Triangle.h	/^    Point points[3]; \/* [c], [a], [b] *\/$/;"	m	class:Triangle	access:private
qCleanupResources_resources	qrc_resources.cpp	/^int QT_MANGLE_NAMESPACE(qCleanupResources_resources)()$/;"	f	signature:()
qInitResources_resources	qrc_resources.cpp	/^int QT_MANGLE_NAMESPACE(qInitResources_resources)()$/;"	f	signature:()
qRegisterResourceData	qrc_resources.cpp	/^extern Q_CORE_EXPORT bool qRegisterResourceData$/;"	p	file:	signature:(int, const unsigned char *, const unsigned char *, const unsigned char *)
qUnregisterResourceData	qrc_resources.cpp	/^extern Q_CORE_EXPORT bool qUnregisterResourceData$/;"	p	file:	signature:(int, const unsigned char *, const unsigned char *, const unsigned char *)
qt_meta_data_Controller	moc_Controller.cpp	/^static const uint qt_meta_data_Controller[] = {$/;"	v	file:
qt_meta_data_MainWindow	moc_MainWindow.cpp	/^static const uint qt_meta_data_MainWindow[] = {$/;"	v	file:
qt_meta_data_PainterWidget	moc_PainterWidget.cpp	/^static const uint qt_meta_data_PainterWidget[] = {$/;"	v	file:
qt_meta_stringdata_Controller	moc_Controller.cpp	/^static const char qt_meta_stringdata_Controller[] = {$/;"	v	file:
qt_meta_stringdata_MainWindow	moc_MainWindow.cpp	/^static const char qt_meta_stringdata_MainWindow[] = {$/;"	v	file:
qt_meta_stringdata_PainterWidget	moc_PainterWidget.cpp	/^static const char qt_meta_stringdata_PainterWidget[] = {$/;"	v	file:
qt_metacall	moc_Controller.cpp	/^int Controller::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_MainWindow.cpp	/^int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_PainterWidget.cpp	/^int PainterWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacast	moc_Controller.cpp	/^void *Controller::qt_metacast(const char *_clname)$/;"	f	class:Controller	signature:(const char *_clname)
qt_metacast	moc_MainWindow.cpp	/^void *MainWindow::qt_metacast(const char *_clname)$/;"	f	class:MainWindow	signature:(const char *_clname)
qt_metacast	moc_PainterWidget.cpp	/^void *PainterWidget::qt_metacast(const char *_clname)$/;"	f	class:PainterWidget	signature:(const char *_clname)
qt_resource_data	qrc_resources.cpp	/^static const unsigned char qt_resource_data[] = {$/;"	v	file:
qt_resource_name	qrc_resources.cpp	/^static const unsigned char qt_resource_name[] = {$/;"	v	file:
qt_resource_struct	qrc_resources.cpp	/^static const unsigned char qt_resource_struct[] = {$/;"	v	file:
qt_static_metacall	moc_Controller.cpp	/^void Controller::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Controller	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
qt_static_metacall	moc_MainWindow.cpp	/^void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
qt_static_metacall	moc_PainterWidget.cpp	/^void PainterWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PainterWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
resize	Controller.cpp	/^void Controller::resize()$/;"	f	class:Controller	signature:()
resize	Controller.h	/^    void resize();$/;"	p	class:Controller	access:public	signature:()
resize	Model.cpp	/^void Model::resize()$/;"	f	class:Model	signature:()
resize	Model.h	/^    void resize();$/;"	p	class:Model	access:public	signature:()
resizeEvent	PainterWidget.cpp	/^void PainterWidget::resizeEvent(QResizeEvent*)$/;"	f	class:PainterWidget	signature:(QResizeEvent*)
resizeEvent	PainterWidget.h	/^    virtual void resizeEvent(QResizeEvent*);$/;"	p	class:PainterWidget	access:protected	signature:(QResizeEvent*)
retranslateUi	ui_MainWindow.h	/^    void retranslateUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
rheight	Image.cpp	/^unsigned int Image::rheight() const$/;"	f	class:Image	signature:() const
rheight	Image.h	/^    unsigned int rheight() const;$/;"	p	class:Image	access:public	signature:() const
rwidth	Image.cpp	/^unsigned int Image::rwidth() const$/;"	f	class:Image	signature:() const
rwidth	Image.h	/^    unsigned int rwidth() const;$/;"	p	class:Image	access:public	signature:() const
setBlend	Controller.cpp	/^void Controller::setBlend(const int blend)$/;"	f	class:Controller	signature:(const int blend)
setBlend	Controller.h	/^    void setBlend(const int);$/;"	p	class:Controller	access:public	signature:(const int)
setBlend	Model.cpp	/^void Model::setBlend(const int blend)$/;"	f	class:Model	signature:(const int blend)
setBlend	Model.h	/^    void setBlend(const int);$/;"	p	class:Model	access:public	signature:(const int)
setBlend	Triangle.cpp	/^void Triangle::setBlend(const bool _blend)$/;"	f	class:Triangle	signature:(const bool _blend)
setBlend	Triangle.h	/^    void setBlend(const bool);$/;"	p	class:Triangle	access:public	signature:(const bool)
setDial	View.h	/^    virtual void setDial(const int) = 0;$/;"	p	class:View	access:public	signature:(const int)
setDial	ViewPuzzle.cpp	/^void ViewPuzzle::setDial(const int step)$/;"	f	class:ViewPuzzle	signature:(const int step)
setDial	ViewPuzzle.h	/^    virtual void setDial(const int);$/;"	p	class:ViewPuzzle	access:public	signature:(const int)
setFilter	Controller.cpp	/^void Controller::setFilter(const int filter)$/;"	f	class:Controller	signature:(const int filter)
setFilter	Controller.h	/^    void setFilter(const int);$/;"	p	class:Controller	access:public	signature:(const int)
setFilter	Image.cpp	/^void Image::setFilter(const Filter& _filter)$/;"	f	class:Image	signature:(const Filter& _filter)
setFilter	Image.h	/^    void setFilter(const Filter& filter);$/;"	p	class:Image	access:public	signature:(const Filter& filter)
setFilter	Model.cpp	/^void Model::setFilter(const int _filter)$/;"	f	class:Model	signature:(const int _filter)
setFilter	Model.h	/^    void setFilter(const int);$/;"	p	class:Model	access:public	signature:(const int)
setImageCoordinates	Triangle.cpp	/^void Triangle::setImageCoordinates(const Point* coordinates)$/;"	f	class:Triangle	signature:(const Point* coordinates)
setImageCoordinates	Triangle.h	/^    void setImageCoordinates(const Point*);$/;"	p	class:Triangle	access:public	signature:(const Point*)
setPixel	PainterWidget.cpp	/^void PainterWidget::setPixel(int x, int y, QRgb color)$/;"	f	class:PainterWidget	signature:(int x, int y, QRgb color)
setPixel	PainterWidget.h	/^    void setPixel(int x, int y, unsigned int color);$/;"	p	class:PainterWidget	access:public	signature:(int x, int y, unsigned int color)
setPixel	View.h	/^    virtual void setPixel(int x, int y, unsigned int color) = 0;$/;"	p	class:View	access:public	signature:(int x, int y, unsigned int color)
setPixel	ViewPuzzle.cpp	/^void ViewPuzzle::setPixel(int x, int y, unsigned int color)$/;"	f	class:ViewPuzzle	signature:(int x, int y, unsigned int color)
setPixel	ViewPuzzle.h	/^    virtual void setPixel(int x, int y, unsigned int color);$/;"	p	class:ViewPuzzle	access:public	signature:(int x, int y, unsigned int color)
setPoints	Triangle.cpp	/^void Triangle::setPoints(const Point& x, const double _angle)$/;"	f	class:Triangle	signature:(const Point& x, const double _angle)
setPoints	Triangle.h	/^    void setPoints(const Point& x, const double _angle);$/;"	p	class:Triangle	access:private	signature:(const Point& x, const double _angle)
setScale	Image.cpp	/^void Image::setScale(const double hscale, const double vscale)$/;"	f	class:Image	signature:(const double hscale, const double vscale)
setScale	Image.h	/^    void setScale(const double hscale, const double vscale);$/;"	p	class:Image	access:public	signature:(const double hscale, const double vscale)
setStep	Controller.cpp	/^void Controller::setStep(const int _step)$/;"	f	class:Controller	signature:(const int _step)
setStep	Controller.h	/^    void setStep(const int);$/;"	p	class:Controller	access:public	signature:(const int)
setStep	Model.cpp	/^void Model::setStep(const int _step)$/;"	f	class:Model	signature:(const int _step)
setStep	Model.h	/^    void setStep(const int);$/;"	p	class:Model	access:public	signature:(const int)
setTrianglePoints	Model.cpp	/^void Model::setTrianglePoints(Triangle& triangle, const int number)$/;"	f	class:Model	signature:(Triangle& triangle, const int number)
setTrianglePoints	Model.h	/^    void setTrianglePoints(Triangle& triangle, const int number);$/;"	p	class:Model	access:private	signature:(Triangle& triangle, const int number)
setupUi	ui_MainWindow.h	/^    void setupUi(QMainWindow *MainWindow)$/;"	f	class:Ui_MainWindow	access:public	signature:(QMainWindow *MainWindow)
signX	Line.h	/^    int signX, signY;$/;"	m	class:Line	access:private
signY	Line.h	/^    int signX, signY;$/;"	m	class:Line	access:private
start	Controller.cpp	/^void Controller::start()$/;"	f	class:Controller	signature:()
start	Controller.h	/^    void start();$/;"	p	class:Controller	access:public	signature:()
startButton	ui_MainWindow.h	/^    QPushButton *startButton;$/;"	m	class:Ui_MainWindow	access:public
staticMetaObject	moc_Controller.cpp	/^const QMetaObject Controller::staticMetaObject = {$/;"	m	class:Controller	file:
staticMetaObject	moc_MainWindow.cpp	/^const QMetaObject MainWindow::staticMetaObject = {$/;"	m	class:MainWindow	file:
staticMetaObject	moc_PainterWidget.cpp	/^const QMetaObject PainterWidget::staticMetaObject = {$/;"	m	class:PainterWidget	file:
staticMetaObjectExtraData	moc_Controller.cpp	/^const QMetaObjectExtraData Controller::staticMetaObjectExtraData = {$/;"	m	class:Controller	file:
staticMetaObjectExtraData	moc_MainWindow.cpp	/^const QMetaObjectExtraData MainWindow::staticMetaObjectExtraData = {$/;"	m	class:MainWindow	file:
staticMetaObjectExtraData	moc_PainterWidget.cpp	/^const QMetaObjectExtraData PainterWidget::staticMetaObjectExtraData = {$/;"	m	class:PainterWidget	file:
statusBar	ui_MainWindow.h	/^    QStatusBar *statusBar;$/;"	m	class:Ui_MainWindow	access:public
step	Controller.h	/^    int step;$/;"	m	class:Controller	access:private
step	Model.h	/^    int step;$/;"	m	class:Model	access:private
stop	Controller.cpp	/^void Controller::stop()$/;"	f	class:Controller	signature:()
stop	Controller.h	/^    void stop();$/;"	p	class:Controller	access:public	signature:()
stopButton	ui_MainWindow.h	/^    QPushButton *stopButton;$/;"	m	class:Ui_MainWindow	access:public
timer	Controller.h	/^    QTimer timer;$/;"	m	class:Controller	access:private
transparentPixels	Triangle.h	/^    int transparentPixels;$/;"	m	class:Triangle	access:private
triangles	Model.h	/^    Triangle* triangles[NUMBER_OF_TRIANGLES];$/;"	m	class:Model	access:private
ui	MainWindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
ui	ViewPuzzle.h	/^    Ui::MainWindow ui;$/;"	m	class:ViewPuzzle	access:private
update	Controller.cpp	/^void Controller::update()$/;"	f	class:Controller	signature:()
update	Controller.h	/^    void update();$/;"	p	class:Controller	access:public	signature:()
verticalLayout_2	ui_MainWindow.h	/^    QVBoxLayout *verticalLayout_2;$/;"	m	class:Ui_MainWindow	access:public
verticalSpacer	ui_MainWindow.h	/^    QSpacerItem *verticalSpacer;$/;"	m	class:Ui_MainWindow	access:public
view	Model.h	/^    View* view;$/;"	m	class:Model	access:private
view	Triangle.h	/^    View* view;$/;"	m	class:Triangle	access:private
width	Image.cpp	/^unsigned int Image::width() const$/;"	f	class:Image	signature:() const
width	Image.h	/^    unsigned int width() const;$/;"	p	class:Image	access:public	signature:() const
x	Line.h	/^    Point x, y;$/;"	m	class:Line	access:private
xcomp	Triangle.cpp	/^bool xcomp(const Point& x, const Point& y)$/;"	f	signature:(const Point& x, const Point& y)
y	Line.h	/^    Point x, y;$/;"	m	class:Line	access:private
ycomp	Triangle.cpp	/^bool ycomp(const Point& x, const Point& y)$/;"	f	signature:(const Point& x, const Point& y)
~Controller	Controller.cpp	/^Controller::~Controller()$/;"	f	class:Controller	signature:()
~Controller	Controller.h	/^    ~Controller();$/;"	p	class:Controller	access:public	signature:()
~Image	Image.cpp	/^Image::~Image() {};$/;"	f	class:Image	signature:()
~Image	Image.h	/^    ~Image ();$/;"	p	class:Image	access:public	signature:()
~MainWindow	MainWindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
~MainWindow	MainWindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
~Model	Model.cpp	/^Model::~Model()$/;"	f	class:Model	signature:()
~Model	Model.h	/^    ~Model();$/;"	p	class:Model	access:public	signature:()
~PainterWidget	PainterWidget.cpp	/^PainterWidget::~PainterWidget()$/;"	f	class:PainterWidget	signature:()
~PainterWidget	PainterWidget.h	/^    ~PainterWidget();$/;"	p	class:PainterWidget	access:public	signature:()
~View	View.h	/^    virtual ~View() {}$/;"	f	class:View	access:public	signature:()
~ViewPuzzle	ViewPuzzle.cpp	/^ViewPuzzle::~ViewPuzzle()$/;"	f	class:ViewPuzzle	signature:()
~ViewPuzzle	ViewPuzzle.h	/^    virtual ~ViewPuzzle();$/;"	p	class:ViewPuzzle	access:public	signature:()
